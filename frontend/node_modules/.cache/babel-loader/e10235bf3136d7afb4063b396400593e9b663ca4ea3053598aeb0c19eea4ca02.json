{"ast":null,"code":"export const calculateSubjectAttendancePercentage = (presentCount, totalSessions) => {\n  if (totalSessions === 0 || presentCount === 0) {\n    return 0;\n  }\n  const percentage = presentCount / totalSessions * 100;\n  return percentage.toFixed(2); // Limit to two decimal places\n};\n\nexport const groupAttendanceBySubject = subjectAttendance => {\n  const attendanceBySubject = {};\n  subjectAttendance.forEach(attendance => {\n    const subName = attendance.subName.subName;\n    const sessions = attendance.subName.sessions;\n    const subId = attendance.subName._id;\n    if (!attendanceBySubject[subName]) {\n      attendanceBySubject[subName] = {\n        present: 0,\n        absent: 0,\n        sessions: sessions,\n        allData: [],\n        subId: subId\n      };\n    }\n    if (attendance.status === \"Present\") {\n      attendanceBySubject[subName].present++;\n    } else if (attendance.status === \"Absent\") {\n      attendanceBySubject[subName].absent++;\n    }\n    attendanceBySubject[subName].allData.push({\n      date: attendance.date,\n      status: attendance.status\n    });\n  });\n  return attendanceBySubject;\n};\nexport const calculateOverallAttendancePercentage = subjectAttendance => {\n  let totalSessionsSum = 0;\n  let presentCountSum = 0;\n  const uniqueSubIds = [];\n  subjectAttendance.forEach(attendance => {\n    const subId = attendance.subName._id;\n    if (!uniqueSubIds.includes(subId)) {\n      const sessions = parseInt(attendance.subName.sessions);\n      totalSessionsSum += sessions;\n      uniqueSubIds.push(subId);\n    }\n    presentCountSum += attendance.status === \"Present\" ? 1 : 0;\n  });\n  if (totalSessionsSum === 0 || presentCountSum === 0) {\n    return 0;\n  }\n  return presentCountSum / totalSessionsSum * 100;\n};","map":{"version":3,"names":["calculateSubjectAttendancePercentage","presentCount","totalSessions","percentage","toFixed","groupAttendanceBySubject","subjectAttendance","attendanceBySubject","forEach","attendance","subName","sessions","subId","_id","present","absent","allData","status","push","date","calculateOverallAttendancePercentage","totalSessionsSum","presentCountSum","uniqueSubIds","includes","parseInt"],"sources":["/Users/shawon/Documents/code life/programming hero/SM-system/frontend/src/components/attendanceCalculator.js"],"sourcesContent":["export const calculateSubjectAttendancePercentage = (presentCount, totalSessions) => {\n    if (totalSessions === 0 || presentCount === 0) {\n        return 0;\n    }\n    const percentage = (presentCount / totalSessions) * 100;\n    return percentage.toFixed(2); // Limit to two decimal places\n};\n\n\nexport const groupAttendanceBySubject = (subjectAttendance) => {\n    const attendanceBySubject = {};\n\n    subjectAttendance.forEach((attendance) => {\n        const subName = attendance.subName.subName;\n        const sessions = attendance.subName.sessions;\n        const subId = attendance.subName._id;\n\n        if (!attendanceBySubject[subName]) {\n            attendanceBySubject[subName] = {\n                present: 0,\n                absent: 0,\n                sessions: sessions,\n                allData: [],\n                subId: subId\n            };\n        }\n        if (attendance.status === \"Present\") {\n            attendanceBySubject[subName].present++;\n        } else if (attendance.status === \"Absent\") {\n            attendanceBySubject[subName].absent++;\n        }\n        attendanceBySubject[subName].allData.push({\n            date: attendance.date,\n            status: attendance.status,\n        });\n    });\n    return attendanceBySubject;\n}\n\nexport const calculateOverallAttendancePercentage = (subjectAttendance) => {\n    let totalSessionsSum = 0;\n    let presentCountSum = 0;\n    const uniqueSubIds = [];\n\n    subjectAttendance.forEach((attendance) => {\n        const subId = attendance.subName._id;\n        if (!uniqueSubIds.includes(subId)) {\n            const sessions = parseInt(attendance.subName.sessions);\n            totalSessionsSum += sessions;\n            uniqueSubIds.push(subId);\n        }\n        presentCountSum += attendance.status === \"Present\" ? 1 : 0;\n    });\n\n    if (totalSessionsSum === 0 || presentCountSum === 0) {\n        return 0;\n    }\n\n    return (presentCountSum / totalSessionsSum) * 100;\n};"],"mappings":"AAAA,OAAO,MAAMA,oCAAoC,GAAGA,CAACC,YAAY,EAAEC,aAAa,KAAK;EACjF,IAAIA,aAAa,KAAK,CAAC,IAAID,YAAY,KAAK,CAAC,EAAE;IAC3C,OAAO,CAAC;EACZ;EACA,MAAME,UAAU,GAAIF,YAAY,GAAGC,aAAa,GAAI,GAAG;EACvD,OAAOC,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AAClC,CAAC;;AAGD,OAAO,MAAMC,wBAAwB,GAAIC,iBAAiB,IAAK;EAC3D,MAAMC,mBAAmB,GAAG,CAAC,CAAC;EAE9BD,iBAAiB,CAACE,OAAO,CAAEC,UAAU,IAAK;IACtC,MAAMC,OAAO,GAAGD,UAAU,CAACC,OAAO,CAACA,OAAO;IAC1C,MAAMC,QAAQ,GAAGF,UAAU,CAACC,OAAO,CAACC,QAAQ;IAC5C,MAAMC,KAAK,GAAGH,UAAU,CAACC,OAAO,CAACG,GAAG;IAEpC,IAAI,CAACN,mBAAmB,CAACG,OAAO,CAAC,EAAE;MAC/BH,mBAAmB,CAACG,OAAO,CAAC,GAAG;QAC3BI,OAAO,EAAE,CAAC;QACVC,MAAM,EAAE,CAAC;QACTJ,QAAQ,EAAEA,QAAQ;QAClBK,OAAO,EAAE,EAAE;QACXJ,KAAK,EAAEA;MACX,CAAC;IACL;IACA,IAAIH,UAAU,CAACQ,MAAM,KAAK,SAAS,EAAE;MACjCV,mBAAmB,CAACG,OAAO,CAAC,CAACI,OAAO,EAAE;IAC1C,CAAC,MAAM,IAAIL,UAAU,CAACQ,MAAM,KAAK,QAAQ,EAAE;MACvCV,mBAAmB,CAACG,OAAO,CAAC,CAACK,MAAM,EAAE;IACzC;IACAR,mBAAmB,CAACG,OAAO,CAAC,CAACM,OAAO,CAACE,IAAI,CAAC;MACtCC,IAAI,EAAEV,UAAU,CAACU,IAAI;MACrBF,MAAM,EAAER,UAAU,CAACQ;IACvB,CAAC,CAAC;EACN,CAAC,CAAC;EACF,OAAOV,mBAAmB;AAC9B,CAAC;AAED,OAAO,MAAMa,oCAAoC,GAAId,iBAAiB,IAAK;EACvE,IAAIe,gBAAgB,GAAG,CAAC;EACxB,IAAIC,eAAe,GAAG,CAAC;EACvB,MAAMC,YAAY,GAAG,EAAE;EAEvBjB,iBAAiB,CAACE,OAAO,CAAEC,UAAU,IAAK;IACtC,MAAMG,KAAK,GAAGH,UAAU,CAACC,OAAO,CAACG,GAAG;IACpC,IAAI,CAACU,YAAY,CAACC,QAAQ,CAACZ,KAAK,CAAC,EAAE;MAC/B,MAAMD,QAAQ,GAAGc,QAAQ,CAAChB,UAAU,CAACC,OAAO,CAACC,QAAQ,CAAC;MACtDU,gBAAgB,IAAIV,QAAQ;MAC5BY,YAAY,CAACL,IAAI,CAACN,KAAK,CAAC;IAC5B;IACAU,eAAe,IAAIb,UAAU,CAACQ,MAAM,KAAK,SAAS,GAAG,CAAC,GAAG,CAAC;EAC9D,CAAC,CAAC;EAEF,IAAII,gBAAgB,KAAK,CAAC,IAAIC,eAAe,KAAK,CAAC,EAAE;IACjD,OAAO,CAAC;EACZ;EAEA,OAAQA,eAAe,GAAGD,gBAAgB,GAAI,GAAG;AACrD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}